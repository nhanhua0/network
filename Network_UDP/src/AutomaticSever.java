


import Service.PlayFairCipher;
import Service.TimViTri;
import java.awt.HeadlessException;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Nhan
 */
public class AutomaticSever extends javax.swing.JFrame {

    /**
     * Creates new form Server1
     */
    

    public AutomaticSever() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AutomaticSever.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AutomaticSever.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AutomaticSever.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AutomaticSever.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new AutomaticSever().setVisible(true);
            try {
                while (true) {
                   DatagramSocket datagramSocket = new DatagramSocket(5432);

                    // đưa này vào trong while
                    // đưa này vào trong while
                    byte[] readBuffer = new byte[1024];

//                byte[] readBufferKhoa = new byte[1024];
//
//                byte[] readBufferTuKhoa = new byte[1024];
                    byte[] writeBuffer = new byte[1024];

                    DatagramPacket receivePacket = new DatagramPacket(readBuffer, readBuffer.length);
//                DatagramPacket receivePacketKhoa = new DatagramPacket(readBufferKhoa, readBufferKhoa.length);
//                DatagramPacket receivePacketTuKhoa = new DatagramPacket(readBufferTuKhoa, readBufferTuKhoa.length);

                    datagramSocket.receive(receivePacket);
//                datagramSocket.receive(receivePacketKhoa);
//                datagramSocket.receive(receivePacketTuKhoa);

                    String line = new String(receivePacket.getData()).trim();
//                String lineKhoa = new String(receivePacketKhoa.getData()).trim();
//                String lineTuKhoa = new String(receivePacketTuKhoa.getData()).trim();

                    String[] nhan = line.split("@");
                    String lineBanMa = nhan[0];
                    String lineKhoa = nhan[1];
                    String lineTuKhoa = nhan[2];

//                        txtBanMa.setText(lineBanMa);
//                        txtKhoa.setText(lineKhoa);
//                        txtTuKhoa.setText(lineTuKhoa);
                    System.out.println("Ban Ma: " + lineBanMa);
                    System.out.println("Khoa: " + lineKhoa);
                    System.out.println("Tu khoa: " + lineTuKhoa);
/////Giải mã/////

                    PlayFairCipher playFairCipher = new PlayFairCipher();
                    String[][] table;

                    String key = playFairCipher.parseString(lineKhoa);
                    System.out.println("khoa" + lineKhoa);
                    if ("".equals(key)) {
                        JOptionPane.showMessageDialog(null, "please input key!");
                    }

///
                    table = playFairCipher.cipherTable(key);
                    String outPut = lineBanMa;
                    String banRo = playFairCipher.decode(outPut);
                    System.out.println(banRo);
                    String lastStringAfterSplit = "";
                    if (banRo.charAt(banRo.length() - 1) == 'X') {
                        lastStringAfterSplit = banRo.substring(0, banRo.length() - 1);

                    } else {

                        lastStringAfterSplit = banRo;
                    }

                    banRo = lastStringAfterSplit;

///Tìm vị trí///
                    TimViTri timViTri = new TimViTri();

                    String tuKhoa = playFairCipher.parseString(lineTuKhoa);

                    String chuoiViTri = timViTri.TimViTri(banRo, tuKhoa);

                    String vitri = chuoiViTri;
                    if ("".equals(vitri)) {
                        JOptionPane.showMessageDialog(null, "Empty position");
                        System.out.println("Empty Positon!");
                    }

// bỏ cái writeBuffer này
//writeBuffer = line.getBytes();
                    InetAddress host = receivePacket.getAddress();
                    int port = receivePacket.getPort();

                    writeBuffer = vitri.getBytes();

                    DatagramPacket sendPacket = new DatagramPacket(writeBuffer, writeBuffer.length, host, port);
                    datagramSocket.send(sendPacket);

//
                }

            } catch (HeadlessException | IOException e) {
                e.printStackTrace();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
